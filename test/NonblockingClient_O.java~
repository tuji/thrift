import org.apache.thrift.TException;
import org.apache.thrift.transport.TTransportException;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TNonblockingSocket;
import org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import java.io.IOException;

public class NonblockingClient_O {
 
    private void invoke() throws IOException{
        TTransport transport;
        try {
	    transport = new TNonblockingSocket("localhost", 7911);
	    ((TNonblockingSocket)transport).startConnect();
            //transport = new TFramedTransport(new TNonblockingSocket("localhost", 7911));
	    //transport.open();
	    
            TProtocol protocol = new TBinaryProtocol(transport);
 
            ArithmeticService.Client client = new ArithmeticService.Client(protocol);
            
	    

	    if(((TNonblockingSocket)transport).finishConnect() == true)
		System.out.println("Connect to remote server successfully.");
 
            long addResult = client.add(100, 200);
            System.out.println("Add result: " + addResult);
            long multiplyResult = client.multiply(20, 40);
            System.out.println("Multiply result: " + multiplyResult);
 
            transport.close();
        } catch (IOException e) {
	}
          catch (TTransportException e) {
            e.printStackTrace();
        } catch (TException e) {
            e.printStackTrace();
        }
    }
 
    public static void main(String[] args) {
        NonblockingClient_O c = new NonblockingClient_O();
        try {
		c.invoke();
	} catch (IOException e) {
	}
    }
 
}
